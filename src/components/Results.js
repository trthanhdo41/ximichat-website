import React, { useState, useEffect } from 'react';
import { HiArrowTrendingUp, HiBolt, HiCurrencyDollar, HiFaceSmile } from 'react-icons/hi2';
import Counter from './Counter';
import './Results.css';

const Results = () => {
  const [activeTestimonial, setActiveTestimonial] = useState(0);
  const [isPaused, setIsPaused] = useState(false);

  const testimonials = [
    {
      name: 'Anh Minh Ho√†ng',
      position: 'CEO, Fashion Store ABC',
      avatar: 'üë®‚Äçüíº',
      content: 'XimiChat ƒë√£ gi√∫p shop th·ªùi trang c·ªßa t√¥i tƒÉng 200% doanh thu. AI tr·∫£ l·ªùi kh√°ch h√†ng c·ª±c nhanh v√† ch√≠nh x√°c, kh√¥ng bao gi·ªù b·ªè l·ª° ƒë∆°n h√†ng n√†o!',
      results: {
        sales: '+200%',
        response: '< 3s',
        satisfaction: '98%'
      },
      industry: 'Th·ªùi trang'
    },
    {
      name: 'Ch·ªã Lan Ph∆∞∆°ng',
      position: 'Marketing Manager, BeautyWorld',
      avatar: 'üë©‚Äçüíº',
      content: 'T·ª´ khi d√πng XimiChat, team CSKH c·ªßa t√¥i gi·∫£m t·ª´ 5 ng∆∞·ªùi xu·ªëng 2 ng∆∞·ªùi nh∆∞ng hi·ªáu qu·∫£ l·∫°i tƒÉng g·∫•p ƒë√¥i. Ti·∫øt ki·ªám ƒë∆∞·ª£c 15 tri·ªáu/th√°ng chi ph√≠ nh√¢n s·ª±.',
      results: {
        cost: '-60%',
        efficiency: '+100%',
        team: '3 ng∆∞·ªùi'
      },
      industry: 'M·ªπ ph·∫©m'
    },
    {
      name: 'Anh Thanh T√πng',
      position: 'Founder, TechGadget',
      avatar: 'üë®‚Äçüíª',
      content: 'AI c·ªßa XimiChat hi·ªÉu r√µ s·∫£n ph·∫©m c√¥ng ngh·ªá, t∆∞ v·∫•n kh√°ch h√†ng chuy√™n nghi·ªáp nh∆∞ nh√¢n vi√™n kinh nghi·ªám. T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi tƒÉng 150%!',
      results: {
        conversion: '+150%',
        orders: '+300%',
        revenue: '+250%'
      },
      industry: 'C√¥ng ngh·ªá'
    },
    {
      name: 'Ch·ªã Mai Linh',
      position: 'Gi√°m ƒë·ªëc, Nh√† h√†ng S√†i G√≤n',
      avatar: 'üë©‚Äçüç≥',
      content: 'XimiChat gi√∫p nh√† h√†ng c·ªßa t√¥i nh·∫≠n ƒë·∫∑t b√†n 24/7, t·ª± ƒë·ªông x·ª≠ l√Ω menu v√† ph·ª•c v·ª• kh√°ch h√†ng ti·∫øng Anh. Doanh thu cu·ªëi tu·∫ßn tƒÉng 180%!',
      results: {
        bookings: '+400%',
        weekend: '+180%',
        rating: '4.9‚òÖ'
      },
      industry: 'Nh√† h√†ng'
    },
    {
      name: 'Anh ƒê·ª©c Minh',
      position: 'CEO, EduSmart Academy',
      avatar: 'üë®‚Äçüéì',
      content: 'V·ªõi XimiChat, h·ªçc vi√™n ƒë∆∞·ª£c t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p ngay l·∫≠p t·ª©c. T·ª∑ l·ªá ƒëƒÉng k√Ω kh√≥a h·ªçc online tƒÉng 320%, ti·∫øt ki·ªám 80% th·ªùi gian t∆∞ v·∫•n.',
      results: {
        enrollment: '+320%',
        consultation: '-80%',
        retention: '95%'
      },
      industry: 'Gi√°o d·ª•c'
    }
  ];

  // Auto-scroll testimonials every 5 seconds
  useEffect(() => {
    if (isPaused) return;
    
    const interval = setInterval(() => {
      setActiveTestimonial(prev => 
        prev === testimonials.length - 1 ? 0 : prev + 1
      );
    }, 5000); // Change slide every 5 seconds

    return () => clearInterval(interval);
  }, [testimonials.length, isPaused]);

  const handleDotClick = (index) => {
    setActiveTestimonial(index);
    setIsPaused(true);
    // Resume auto-scroll after 10 seconds
    setTimeout(() => setIsPaused(false), 10000);
  };

  // Function to render metric value with Counter
  const renderMetricValue = (value, key, testimonialIndex) => {
    // Handle different value formats
    if (value.includes('+') && value.includes('%')) {
      // +200%, +150%, etc.
      const num = parseInt(value.replace(/[+%]/g, ''));
      return <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix="%" prefix="+" duration={2000} />;
    } else if (value.includes('-') && value.includes('%')) {
      // -60%, -80%, etc.
      const num = parseInt(value.replace(/[-%]/g, ''));
      return <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix="%" prefix="-" duration={2000} />;
    } else if (value.includes('%') && !value.includes('+') && !value.includes('-')) {
      // 98%, 95%, etc.
      const num = parseFloat(value.replace('%', ''));
      return <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix="%" duration={2000} decimals={num % 1 !== 0 ? 1 : 0} />;
    } else if (value.includes('‚òÖ')) {
      // 4.9‚òÖ
      const num = parseFloat(value.replace('‚òÖ', ''));
      return <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix="‚òÖ" duration={1800} decimals={1} />;
    } else if (value.includes('< ')) {
      // < 3s
      const num = parseInt(value.replace(/[< s]/g, ''));
      return (
        <>
          &lt; <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix="s" duration={1500} />
        </>
      );
    } else if (value.includes(' ng∆∞·ªùi')) {
      // 3 ng∆∞·ªùi
      const num = parseInt(value.replace(' ng∆∞·ªùi', ''));
      return <Counter key={`${testimonialIndex}-${key}-${value}`} end={num} suffix=" ng∆∞·ªùi" duration={1500} />;
    } else {
      // Fallback to original value
      return value;
    }
  };

  const stats = [
    {
      icon: HiArrowTrendingUp,
      value: '250%',
      numberValue: 250,
      suffix: '%',
      label: 'TƒÉng trung b√¨nh doanh thu',
      color: '#4caf50'
    },
    {
      icon: HiBolt,
      value: '2.5s',
      numberValue: 2.5,
      decimals: 1,
      suffix: 's',
      label: 'Th·ªùi gian ph·∫£n h·ªìi trung b√¨nh',
      color: '#2196f3'
    },
    {
      icon: HiCurrencyDollar,
      value: '70%',
      numberValue: 70,
      suffix: '%',
      label: 'Ti·∫øt ki·ªám chi ph√≠ CSKH',
      color: '#ff9800'
    },
    {
      icon: HiFaceSmile,
      value: '97%',
      numberValue: 97,
      suffix: '%',
      label: 'Kh√°ch h√†ng h√†i l√≤ng',
      color: '#e91e63'
    }
  ];

  return (
    <section className="results section">
      <div className="container">
        <div className="section-header" data-aos="fade-up">
          <h2 className="section-title">
            K·∫øt qu·∫£ th·ª±c t·∫ø t·ª´ kh√°ch h√†ng c·ªßa ch√∫ng t√¥i
          </h2>
          <p className="section-subtitle">
            Nh·ªØng con s·ªë ·∫•n t∆∞·ª£ng v√† c√¢u chuy·ªán th√†nh c√¥ng th·ª±c t·∫ø t·ª´ c√°c doanh nghi·ªáp ƒë√£ tin t∆∞·ªüng XimiChat
          </p>
        </div>

        <div className="results-stats" data-aos="fade-up" data-aos-delay="200">
          <div className="stats-grid">
            {stats.map((stat, index) => {
              const IconComponent = stat.icon;
              return (
                <div 
                  key={index} 
                  className="stat-card" 
                  data-aos="zoom-in" 
                  data-aos-delay={300 + index * 100}
                  style={{'--stat-color': stat.color}}
                >
                  <div className="stat-icon">
                    <IconComponent size={48} />
                  </div>
                  <div className="stat-value">
                    <Counter 
                      end={stat.numberValue} 
                      duration={2500} 
                      suffix={stat.suffix || ''} 
                      decimals={stat.decimals || 0}
                    />
                  </div>
                  <div className="stat-label">{stat.label}</div>
                </div>
              );
            })}
          </div>
        </div>

        <div className="testimonials-section" data-aos="fade-up" data-aos-delay="600">
          <h3>Feedback t·ª´ kh√°ch h√†ng</h3>
          
          <div 
            className="testimonial-container"
            onMouseEnter={() => setIsPaused(true)}
            onMouseLeave={() => setIsPaused(false)}
          >
            <div className="testimonial-nav">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  className={`nav-dot ${index === activeTestimonial ? 'active' : ''}`}
                  onClick={() => handleDotClick(index)}
                />
              ))}
            </div>

            <div className="testimonial-content">
              {testimonials.map((testimonial, index) => (
                <div
                  key={index}
                  className={`testimonial-item ${index === activeTestimonial ? 'active' : ''}`}
                >
                  <div className="testimonial-card">
                    <div className="testimonial-header">
                      <div className="customer-info">
                        <div className="customer-avatar">{testimonial.avatar}</div>
                        <div className="customer-details">
                          <h4>{testimonial.name}</h4>
                          <p>{testimonial.position}</p>
                          <span className="industry-tag">{testimonial.industry}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="testimonial-body">
                      <blockquote>"{testimonial.content}"</blockquote>
                      
                      <div className="results-metrics">
                        {Object.entries(testimonial.results).map(([key, value]) => (
                          <div key={key} className="metric">
                            <span className="metric-value">
                              {index === activeTestimonial ? renderMetricValue(value, key, `${index}-${activeTestimonial}`) : value}
                            </span>
                            <span className="metric-label">
                              {key === 'sales' && 'Doanh thu'}
                              {key === 'response' && 'Ph·∫£n h·ªìi'}
                              {key === 'satisfaction' && 'H√†i l√≤ng'}
                              {key === 'cost' && 'Chi ph√≠'}
                              {key === 'efficiency' && 'Hi·ªáu qu·∫£'}
                              {key === 'team' && 'Nh√¢n s·ª±'}
                              {key === 'conversion' && 'Chuy·ªÉn ƒë·ªïi'}
                              {key === 'orders' && 'ƒê∆°n h√†ng'}
                              {key === 'revenue' && 'Doanh thu'}
                              {key === 'bookings' && 'ƒê·∫∑t b√†n'}
                              {key === 'weekend' && 'Cu·ªëi tu·∫ßn'}
                              {key === 'rating' && 'ƒê√°nh gi√°'}
                              {key === 'enrollment' && 'ƒêƒÉng k√Ω'}
                              {key === 'consultation' && 'T∆∞ v·∫•n'}
                              {key === 'retention' && 'Gi·ªØ ch√¢n'}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="success-cta" data-aos="fade-up" data-aos-delay="800">
          <h3>B·∫°n c≈©ng mu·ªën c√≥ k·∫øt qu·∫£ t∆∞∆°ng t·ª±?</h3>
          <p>H√£y ƒë·ªÉ XimiChat gi√∫p doanh nghi·ªáp c·ªßa b·∫°n ƒë·∫°t ƒë∆∞·ª£c nh·ªØng con s·ªë ·∫•n t∆∞·ª£ng nh∆∞ v·∫≠y</p>
          <a href="tel:0888889805" className="btn btn-primary">
            B·∫Øt ƒë·∫ßu th√†nh c√¥ng c·ªßa b·∫°n
          </a>
        </div>
      </div>
    </section>
  );
};

export default Results;